Basically, there are two situations in which we can split the textures, when the pixels are scaled (eg one 
"pixel" is actually a 4x4 square of pixels) and when the pixels are unscaled.
Some prerequisites that we need for this:
	- The pixel buffer array
	- An array that is the same size of the pixel buffer array and is initially populated with 0s
		Every time we visit a pixel in the buffer array we set its value in the second array to 1
		This means we can see which pixels we have visited and skip them if we ever happen to go over them.
	- We only want to consider pixels that are coloured and have a neighbouring pixel that is not coloured.
		Ignore all other pixels
When we find a pixel that is coloured but is next to erased pixels, we move in two directions away from it,
performing DFS to follow the edge of coloured pixels next to erased pixels until either we hit an edge or 
the two paths intersect. We mark each pixel we visit in the DFS as visited in our array
When figuring out how to split the texture when the pixels are unscaled, we need to consider several cases:
1) The two dfs paths do not intersect 
	This means the dfs paths have both reached the edge of the texture
	Once the edges have been found, we switch to following the edge going along erased pixels until either 
	the paths intersect, in which case we do not do anything as we simply have an indent in the texture,
	or we hit the opposite side where there are coloured pixels. 
	In the second case, this allows us to essentially imagine rectangles around the two split shapes and 
	calculate the areas of these rectangles. The contents of the smaller rectangle are copied into a new 
	texture while the bigger rectangle stays in the current texture and all of the pixels that moved to the 
	new texture are set to the erased value
2) The two dfs paths intersect
	This means there is either a hole in the texture, or that islets have been created within the texture
	We would in this case draw lines between each pair of of pixels on the same row
	If there are no coloured pixels between them, move on since there is just a hole.
	If we hit a coloured pixel, run dfs again to get the outline of the islet, and then remove it from the
	texture as we did before

Cleanup:
	After we have dealt with all of the texture splitting, we need to find the dimensions of the remaining texture
	If it still covers the same rectangular area as before, do nothing,
	Otherwise create a new texture of a smaller size and copy the pixels over and delete the old texture.

How to move off in two directions:
	Pick first two elements in the possiblePursuits vector
	Set them to visited
	Find all of their neighbours that are also coloured but surrounded by erased
	Check which ones of those have been visited
	Remove the visited ones from the list of possible paths
	Pick one
	Repeat until the two elements are in the same position in the pixel array or they have hit an edge

	But how do I do the repeat thing?
	First idea is do-while loop, but what conditions would I use?
	You need to keep track of both, but if one hits an edge, you need to keep going with the other one.
	Nested while loops?
	That could work
	Not quite sure how nested while loops work but some testing won't hurt.
	The conditions I need to keep track of are (is first path at an edge) (is second path at an edge) and
	(are they in the same position)

	Also need to figure out how I am going to get the neighbours. I think I should change the function
	so that it only gets the cardinal neighbours rather than all of them but that is not the priority right now