How the basic texture splitting works:
Essentially, each texture contains a flag which is set to true whenever the texture is altered by the erase function
When this occurs the program iterates over the texture, performing the flood-fill algorithm (essentially just fancy bfs) 
whenever it finds a non-transparent pixel to find all other non-transparent pixels that can be reached from it.
This region of the original texture is then transformed into a new pixel buffer using some fancy array manipulation, which
is then used to create a new texture. 
The pixels in this region of the original texture are set to transparent, and the process repeats until we have iterated 
over the whole of the original texture. At this point, we delete the original texture.
This has been fully implemented and it works well, so no need to worry about it.

Theories on how to integrate box2d into the program:
Having had a look at the box2d docs, I think there are two main problems to solve.
1) How to get pixel co-ordinates to actual co-ordinates
2) How to actually attach a shape body to a texture

For 1), I think this is just some googling and maybe following some intro tutorials, perhaps like the one here:
https://www.youtube.com/watch?app=desktop&v=kEClRFKyGkw&t=0s&ab_channel=MakingGamesWithBen
But that is something that should be watched at my own leisure.
For 2), I think the polygon objects discussed in the docs here: https://box2d.org/documentation/md_collision.html#autotoc_md35
are probably the best bet at creating dynamic colliders. 
By the looks of it, I can forego the triangulation algorithm, and just do Marching Squares and Douglas-Peucker. This should
give me something that works. 
Now I just need to implement these two algorithms, which is far easier said than done.
So, essentially, Marching Squares will help me find the outline, which I think can be done just using the existing get 
cardinal neighbours and storing the relevant co-ordinates of the pixel. 
The real challenge will be implementing Douglas-Peucker. Great explanation of the algorithm here: https://www.youtube.com/watch?v=nSYw9GrakjY&ab_channel=TheCodingTrain
We can test if its outline is correct by using the SDL_RenderDrawLine() function as described here: https://lazyfoo.net/tutorials/SDL/08_geometry_rendering/index.php
Ramer-Douglas-Peucker seems very doable and very understandable.